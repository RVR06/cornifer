import {
	CancellationToken,
	ExtensionContext,
	MarkdownString,
	Position,
	TextDocument,
	languages
} from "vscode";

/*
 * Provides contextual hover over dsl keywords
 */
export function setupHoverProvider(context: ExtensionContext) {
	let disposable = languages.registerHoverProvider(['c4', 'c4u'], {
		provideHover(
			document: TextDocument,
			position: Position,
			_: CancellationToken) {
			const word = document.getText(document.getWordRangeAtPosition(position));
			const doc = "https://docs.structurizr.com/dsl/language";
			const link = `${doc}#${word.toLowerCase()}`;

			const map: any = {
				include:
					['```c4u',
						'!include file|directory|url',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'!include file',
						'}',
						'views {',
						'!include url',
						'}',
						'```',
						'---',
						'### Include',
						`[$(book)](${doc}#includes)\n`,
						'Includes one or more dsl fragment.',
						'',
						'$(code)',
						'```c4u',
						'!include observability.model.dslf',
						'!include observability.views.dslf',
						'```'
					],
				ref:
					['```c4u',
						'!ref identifier {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'!ref identifier {}',
						'```',
						'---',
						'### Ref',
						`[$(book)](${link})\n`,
						'References a previously defined element or relationship.',
						'',
						'$(code)',
						'```c4u',
						'!ref obs {',
						'  tags "#external"',
						'}',
						'```'
					],
				workspace:
					['```c4u',
						'workspace "name" "description" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'	# person, softwareSystem, container, component',
						'	# relationship',
						'	# deploymentEnvironment',
						'}',
						'views {',
						'	# theme, branding',
						'	# systemLandscape, systemContext, container, component, deployment, dynamic',
						'}',
						'}',
						'```',
						'---',
						'### Model',
						`[$(book)](${link})\n`,
						'`Workspace` is the top level language construct, and the wrapper for the `model` and `views`. '
					],
				configuration:
					['```c4u',
						'configuration {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'configuration {',
						'```',
						'---',
						'### Configuration',
						`[$(book)](${link})\n`,
						'Each `workspace` could specify some options within a `configuration` block.'
					],
				model:
					['```c4u',
						'model {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'```',
						'---',
						'### Model',
						`[$(book)](${link})\n`,
						'Each `workspace` must contain a `model` block, inside which `elements` and `relationships` are defined.'
					],
				enterprise:
					[
						'### Enterprise',
						'The `enterprise` keyword is now deprecated.',
					],
				views:
					['```c4u',
						'views {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'```',
						'---',
						'### Views',
						`[$(book)](${link})\n`,
						'Each `workspace` can also contain one or more views, defined with the `views` block.'
					],

				group:
					['```c4u',
						'group "name" {}',
						'```',
						'---',
						'>',
						'```c4',
						'# within model',
						'workspace "" "" {',
						'model {',
						'group "name" {}',
						'```',
						'---',
						'>',
						'```c4',
						'# within softwareSystem',
						'workspace "" "" {',
						'model {',
						'_ = softwareSystem "" "" "" {',
						'group "name" {}',
						'```',
						'---',
						'>',
						'```c4',
						'# within container',
						'workspace "" "" {',
						'model {',
						'_ = softwareSystem "" "" "" {',
						'_ = container "" "" "" "" {',
						'group "name" {}',
						'```',
						'---',
						'### Group',
						`[$(book)](${link})\n`,
						'Defines a `group` to cluster elements.',
						'',
						'$(code)',
						'```c4u',
						'group "observability" {}',
						'group "post-processing" {}',
						'```'
					],
				person:
					['```c4u',
						'identifier = person "name" "description" "tags"',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier = person "name" "description" "tags"',
						'```',
						'---',
						'### Person',
						`[$(book)](${link})\n`,
						'Defines a `person`, e.g. a user, actor, role, or persona.',
						'',
						'$(code)',
						'```c4u',
						'matt = person "Material scientist" "Leverages smartphone facilities to capture materials properties." ""',
						'simon = person "Simulation engineer" "Crafts physics-based simulation." "#bot"',
						'```'
					],
				softwaresystem:
					['```c4u',
						'identifier = softwareSystem "name" "description" "tags" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier = softwareSystem "name" "description" "tags" {}',
						'```',
						'---',
						'### Software System',
						`[$(book)](${link})\n`,
						'Defines a `softwareSystem`.',
						'',
						'$(code)',
						'```c4u',
						'mila = softwareSystem "MILA" "Provides lightweight material acquisition facilities & crafts self-contained material assets." "" {}',
						'composer = softwareSystem "Composer" "Handles use cases combinatory generation. Provides job submission & monitoring facilities." "#external" {}',
						'```'
					],
				container:
					['```c4u',
						'identifier = container "name" "description" "technology" "tags" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'_ = softwareSystem "" "" "" {',
						'identifier = container "name" "description" "technology" "tags" {}',
						'```',
						'---',
						'### Container',
						`[$(book)](${link})\n`,
						'Defines a `container`, within a `software system`.\n',
						'',
						'$(code)',
						'```c4u',
						'spa = container "Web App" "Surfaces HPC workload managers insights." "SPA React" "#web" {}',
						'ws = container "World Simulation" "Unfolds storyboard. Provides world state." "C#" "#micro" {}',
						'```'
					],
				component:
					['```c4u',
						'identifier = component "name" "description" "technology" "tags" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'_ = softwareSystem "" "" "" {',
						'_ = container "" "" "" "" {',
						'identifier = component "name" "description" "technology" "tags" {}',
						'```',
						'---',
						'### Component',
						`[$(book)](${link})\n`,
						'Defines a `component`, within a `container`.',
						'',
						'$(code)',
						'```c4u',
						'acquisition = component "Acquisition" "Handles smartphone built-in capabilities." "C#" "" {}',
						'uploading = component "Uploading" "Handles back-end communication." "Java" "#pkg" {}',
						'```'
					],
				theme:
					['```c4u',
						'theme url',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'theme url',
						'```',
						'---',
						'### Theme',
						`[$(book)](${link})\n`,
						'Provides `theme` to fine-tune downstream rendering.',
						'',
						'$(code)',
						'```c4u',
						'theme https://raw.githubusercontent.com/rvr06/cornifer-contrib/main/themes/semantic-alt/theme.json',
						'theme https://raw.githubusercontent.com/rvr06/cornifer-contrib/main/themes/heraldry/theme.json',
						'```'
					],
				deploymentenvironment:
					['```c4u',
						'identifier_ = deploymentEnvironment "name" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier_ = deploymentEnvironment "name" {}',
						'```',
						'---',
						'### Deployment environment',
						`[$(book)](${link})\n`,
						'Provides a way to define a `deployment environment` (e.g. development, testing, staging, live, etc).',
						'',
						'$(code)',
						'```c4u',
						'dev_ = deploymentEnvironment "dev" {}',
						'prod_ = deploymentEnvironment "prod" {}',
						'```'
					],
				deploymentgroup:
					['```c4u',
						'identifier_ = deploymentGroup "name"',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier_ = deploymentEnvironment "name" {',
						'identifier_ = deploymentGroup "name"',
						'```',
						'---',
						'### Deployment group',
						`[$(book)](${link})\n`,
						'Provides a way to define a named `deployment group`',
						'',
						'$(code)',
						'```c4u',
						'worker1_ = deploymentGroup "Worker 01"',
						'eastUS_ = deploymentGroup "East US"',
						'```'
					],
				deploymentnode:
					['```c4u',
						'identifier_ = deploymentNode "name" "description" "technology" "tags" 1 {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier_ = deploymentEnvironment "name" {',
						'identifier_ = deploymentNode "name" "description" "technology" "tags" 1 {}',
						'```',
						'---',
						'### Deployment node',
						`[$(book)](${link})\n`,
						'Define a `deployment node`.',
						'',
						'$(code)',
						'```c4u',
						'ws_ = deploymentNode "Matt workstation" "" "Mircrosoft Windows 10" "#windows" 1 {}',
						'k8s_ = deploymentNode "Orchestration" "" "Kubernetes" "#k8s" 1 {}',
						'db_ = deploymentNode "mongo:latest" "" "Docker" "#docker" 3 {}',
						'```'
					],
				infrastructurenode:
					['```c4u',
						'identifier_ = infrastructureNode "name" "description" "technology" "tags"',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier_ = deploymentEnvironment "name" {',
						'identifier_ = deploymentNode "name" "description" "technology" "tags" 1 {',
						'identifier_ = infrastructureNode "name" "description" "technology" "tags"',
						'```',
						'---',
						'### Infrastructure node',
						`[$(book)](${link})\n`,
						'Defines an `infrastructure node`, which is typically something like a load balancer, firewall, DNS service, ...',
						'',
						'$(code)',
						'```c4u',
						'gateway_ = infrastructureNode "api.application.com" "" "Application Gateway" "Microsoft Azure - Application Gateways"',
						'dns_ = infrastructureNode "DNS" "" "Azure DNS" "Microsoft Azure - DNS Zones"',
						'```'
					],
				containerinstance:
					['```c4u',
						'identifier_ = containerInstance identifier.identifier identifier_ "tags" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier_ = deploymentEnvironment "name" {',
						'deploymentNode "name" "description" "technology" "tags" 1 {',
						'identifier_ = containerInstance identifier.identifier identifier_ "tags" {}',
						'```',
						'---',
						'### Container instance',
						`[$(book)](${link})\n`,
						'Defines an instance of the specified `container` that is deployed on the parent `deployment node`.',
						'',
						'$(code)',
						'```c4u',
						'api_ = containerInstance mila.api worker1_ "" {}',
						'spa_ = containerInstance mila.spa "" "#frontend" {}',
						'```'
					],
				softwaresysteminstance:
					['```c4u',
						'identifier_ = softwareSystemInstance identifier identifier_ "tags" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier_ = deploymentEnvironment "name" {',
						'deploymentNode "name" "description" "technology" "tags" 1 {',
						'identifier_ = softwareSystemInstance identifier identifier_ "tags" {}',
						'```',
						'---',
						'### Software system instance',
						`[$(book)](${link})\n`,
						'Defines an instance of the specified `software system` that is deployed on the parent `deployment node`.',
						'',
						'$(code)',
						'```c4u',
						'vrxp_ = softwareSystemInstance vrxp worker1_,worker2_ "#daedalus_" {}',
						'slurm_ = softwareSystemInstance slurm "" "#workload" {}',
						'```'
					],
				healthcheck:
					['```c4u',
						'healthCheck "description" https://healthCheck.com/ 60 0',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'model {',
						'identifier_ = deploymentEnvironment "name" {',
						'deploymentNode "name" "description" "technology" "tags" 1 {',
						'identifier_ = containerInstance identifier.identifier identifier_ "tags" {',
						'healthCheck "description" https://healthCheck.com/ 60 0',
						'```',
						'---',
						'###',
						`[$(book)](${link})\n`,
						'The `healthCheck` keyword defines a HTTP health check for the parent `software system`/`container` instance.',
						'',
						'$(code)',
						'```c4u',
						'healthCheck "Grafana is up & running" "http://localhost:3000/api/health" 60 0',
						'healthCheck "Prometheus is up & running" "http://localhost:9090/-/healthy" 120 1000',
						'```'
					],
				systemlandscape:
					['```c4u',
						'systemLandscape "name" "description" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'systemLandscape "name" "description" {}',
						'```',
						'---',
						'### System landscape view',
						`[$(book)](${link}-view)\n`,
						'Defines a `system landscape` view, aka `C4.L`.',
						'',
						'$(code)',
						'```c4u',
						'systemLandscape "SystemLandscape" "" {}',
						'systemLandscape "C4_L" "" {}',
						'```'
					],
				systemcontext:
					['```c4u',
						'systemContext identifier "name" "description" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'systemContext identifier "name" "description" {}',
						'```',
						'---',
						'### System context view',
						`[$(book)](${link}-view)\n`,
						'Defines a `system context` view, aka `C4.1`, for the specified `software system`.',
						'',
						'$(code)',
						'```c4u',
						'systemContext solution "SystemContext" "" {}',
						'systemContext solution "C4_1" "" {}',
						'```'
					],
				deployment:
					['```c4u',
						'deployment * identifier "name" "description" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'deployment * identifier "name" "description" {}',
						'```',
						'---',
						'### Deployment view',
						`[$(book)](${link}-view)\n`,
						'Defines a `deployment view`, aka `C4.D`, for the specified scope and `deployment environment`.',
						'',
						'$(code)',
						'```c4u',
						'deployment * dev_ "C4_D" "" {}',
						'deployment * prod_ "ProdDeployment" "" {}',
						'```'
					],
				dynamic:
					['```c4u',
						'dynamic * "name" "description" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'dynamic * "name" "description" {}',
						'```',
						'---',
						'### Dynamic view',
						`[$(book)](${link}-view)\n`,
						'Defines a `dynamic view`, aka `C4.W`, for the specified scope (1st parameter):',
						'+ `*`: People and software systems',
						'+ `identifier`: People, other software systems, and containers',
						'+ `identifier.identifier`: People, other software systems, other containers, and components',
						'',
						'$(code)',
						'```c4u',
						'dynamic mila "C4_W-mobile" "MILA mobile workflow" {',
						'	matt -> mila.mobile',
						'	mila.mobile -> mila.api',
						'	mila.api -> mila.store',
						'	autolayout lr',
						'}',
						'',
						'dynamic monitoring "monitoring-tracing" "Tracing workflow" {',
						'	monitoring.otel -> ouroboros "Collects" ""',
						'	{',
						'		monitoring.otel -> monitoring.jaeger "Exports to" ""',
						'		monitoring.jaeger -> monitoring.grafana "Fuels" ""',
						'	}',
						'	{',
						'		monitoring.otel -> monitoring.zipkin "Exports to" ""',
						'		monitoring.zipkin -> monitoring.grafana "Fuels" ""',
						'	}',
						'}',
						'```'
					],
				filtered:
					['```c4u',
						'filtered "baseview_name" exclude "tags" "name" "description"',
						'filtered "baseview_name" include "tags" "name" "description"',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'filtered "baseview_name" include "tags" "name" "description"',
						'filtered "baseview_name" exclude "tags" "name" "description"',
						'```',
						'---',
						'### Filtered view',
						`[$(book)](${link}-view)\n`,
						'Defines a `filtered view` on top of the specified base view',
						'',
						'$(code)',
						'```c4u',
						'filtered "" exclude "" "" ""',
						'filtered "ouroboros-4_1" exclude "#external" "ouroboros-4_1-local" "Crafting algorithm or diagnosing issue, locally"',
						'filtered "ouroboros-4_1" exclude "Person" "ouroboros-4_1-massive" "Performing Cloud-based massive simulation" ',
						'```'
					],
				animation:
					['```c4u',
						'animation {}',
						'```',
						'---',
						'>',
						'```c4',
						'# eg within systemLandscape, same goes for other views (systemContext, container, component, deployment)',
						'workspace "" "" {',
						'views {',
						'systemLandscape "4_L" "" {',
						'animation {}',
						'```',
						'---',
						'### Animation',
						`[$(book)](${link})\n`,
						'The `animation` keyword defines the animation for the specified `view`. Each animation step should be defined on a separate line, inside the block, specifying the elements that should be included in that step.',
						'',
						'$(code)',
						'```c4u',
						'container monitoring "monitoring-4_2" "" {',
						'	animation {',
						'		monitoring.otel',
						'		monitoring.jaeger monitoring.loki monitoring.prometheus',
						'		monitoring.grafana',
						'	}',
						'}',
						'```'
					],
				perspectives:
					['```c4u',
						'perspectives {}',
						'```',
						'---',
						'>',
						'```c4',
						'# eg within softwareSystem, same goes for other elements and relationships',
						'workspace "" "" {',
						'model {',
						'_ = softwareSystem "" "" "" {',
						'perspectives {}',
						'```',
						'---',
						'### Perspectives',
						`[$(book)](${link})\n`,
						'The `perspectives` block is used to define one or more name/description perspectives for an `element` or `relationship`.',
						'',
						'$(code)',
						'```c4u',
						'',
						'grafana = container "Grafana" "" "" "" {',
						'	perspectives {',
						'		logs "Keep history of past events"',
						'		traces "Enable distributed call tracing"',
						'		metrics "Collect numeric information over time"',
						'	}',
						'}',
						'```'
					],
				properties:
					['```c4u',
						'properties {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'properties {}',
						'```',
						'---',
						'### Styles',
						`[$(book)](${link})\n`,
						'The `properties` block is used to define one or more name/value properties.',
						'',
						'$(code)',
						'```c4u',
						'',
						'properties {',
						'	"structurizr.sort" "created|key|type"',
						'}',
						'```'
					],
				styles:
					['```c4u',
						'styles {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'styles {}',
						'```',
						'---',
						'### Styles',
						`[$(book)](${link})\n`,
						'The `styles` block is the wrapper for one or more `element`/`relationship` styles, which are used when rendering diagrams.',
						'',
						'$(code)',
						'```c4u',
						'',
						'styles {',
						'	element "Group" {',
						'		colour #ecb706',
						'	}',
						'	relationship "#data" {',
						'		colour #ecb706',
						'	}',
						'}',
						'```'
					],
				element:
					['```c4u',
						'element "tag" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'styles {',
						'element "tag" {}',
						'```',
						'---',
						'### Element',
						`[$(book)](${link}-style)\n`,
						'The `element` keyword is used to define an element style.',
						'',
						'$(code)',
						'```c4u',
						'',
						'element "Group" {',
						'	colour #ecb706',
						'}',
						'```'
					],
				relationship:
					['```c4u',
						'relationship "tag" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'styles {',
						'relationship "tag" {}',
						'```',
						'---',
						'### Relationship',
						`[$(book)](${link}-style)\n`,
						'The `relationship` keyword is used to define an relationship style.',
						'',
						'$(code)',
						'```c4u',
						'',
						'relationship "#data" {',
						'	colour #ecb706',
						'}',
						'```'
					],
				branding:
					['```c4u',
						'branding {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'branding {}',
						'```',
						'---',
						'### Branding',
						`[$(book)](${link})\n`,
						'The `branding` block allows you to define some custom branding that should be used when rendering diagrams and documentation.',
						'',
						'$(code)',
						'```c4u',
						'',
						'branding {',
						'	logo https://raw.githubusercontent.com/rvr06/cornifer-contrib/main/assets/daedalus.png',
						'}',
						'```'
					],
				custom:
					['```c4u',
						'custom "key" "title" "description" {}',
						'```',
						'---',
						'>',
						'```c4',
						'workspace "" "" {',
						'views {',
						'custom "key" "title" "description" {}',
						'```',
						'---',
						'### Custom view',
						`[$(book)](${link}-view)\n`,
						'Defines a `custom view`.',
					],
			};

			return {
				contents: [new MarkdownString(`${map[word.toLowerCase()].join('\n')}`, true)]
			};
		}
	});

	context.subscriptions.push(disposable);
}
